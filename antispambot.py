import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ChatType
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv(dotenv_path=os.path.join(os.path.dirname(os.path.dirname(__file__)), ".env"))
TOKEN = os.getenv("TOKEN")  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway
print("TOKEN:", TOKEN)
if not TOKEN:
    raise ValueError("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –°–ø–∏—Å–æ–∫ "—Å–ø–∞–º-—Å–ª–æ–≤" ---
SPAM_WORDS = [
    "–∫—Ä–∏–ø—Ç–æ", "–Ω—Ñ—Ç", "–∫–∞–∑–∏–Ω–æ", "—Å—Ç–∞–≤–∫–∏", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    "crypto", "nft", "casino", "bet", "earn money"
]

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º. "
        "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    logging.info("–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /start –æ—Ç %s", message.from_user.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message()
async def handle_message(message: types.Message):
    if message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    if message.from_user.is_bot:
        return
    text = (message.text or message.caption or "").lower()
    username = message.from_user.username or f"id:{message.from_user.id}"

    if any(word in text for word in SPAM_WORDS):
        try:
            chat_member = await bot.get_chat_member(message.chat.id, (await bot.get_me()).id)
            if chat_member.can_delete_messages:
                await message.delete()
                logging.info("üóë –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @%s —É–¥–∞–ª–µ–Ω–æ (—Å–æ–¥–µ—Ä–∂–∞–ª–æ —Å–ø–∞–º-—Å–ª–æ–≤–æ)", username)
            else:
                logging.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logging.info("ü§ñ AntiSpam Bot –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    if hasattr(asyncio, "WindowsSelectorEventLoopPolicy"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
