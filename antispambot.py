import os
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ChatType
from aiogram.filters import CommandStart
from aiohttp import web

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –°–ø–∏—Å–æ–∫ —Å–ø–∞–º-—Å–ª–æ–≤ ---
SPAM_WORDS = [
    "–∫—Ä–∏–ø—Ç–æ", "–Ω—Ñ—Ç", "–∫–∞–∑–∏–Ω–æ", "—Å—Ç–∞–≤–∫–∏", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    "crypto", "nft", "casino", "bet", "earn money"
]

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    logging.info("–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /start –æ—Ç %s", message.from_user.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message()
async def handle_message(message: types.Message):
    if message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    if message.from_user.is_bot:
        return
    text = (message.text or message.caption or "").lower()
    username = message.from_user.username or f"id:{message.from_user.id}"

    if any(word in text for word in SPAM_WORDS):
        try:
            chat_member = await bot.get_chat_member(message.chat.id, (await bot.get_me()).id)
            if chat_member.can_delete_messages:
                await message.delete()
                logging.info("üóë –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @%s —É–¥–∞–ª–µ–Ω–æ", username)
            else:
                logging.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

# --- Webhook setup ---
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    logging.info("–£–¥–∞–ª—è–µ–º webhook...")
    await bot.delete_webhook()
    await bot.session.close()

async def handle(request: web.Request):
    update = types.Update(**await request.json())
    await dp.process_update(update)
    return web.Response()

# --- Aiohttp server ---
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Webhook...")
    web.run_app(app, host="0.0.0.0", port=PORT)
